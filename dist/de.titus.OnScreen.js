!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const o=new class{constructor(){this.listeners=new Array,this.executing=void 0}addElement(e){console.log("addElement",e),this.listeners.push(new class{constructor(e){this.element=e,this.settings={threshold:1,offset:{top:0,right:0,bottom:0,left:0}}}doChecking(e){console.log("doChecking"),this.__inViewport()&&console.log("inview",this.element)}__inViewport(){console.log("__inViewport");const{top:e,right:t,bottom:n,left:o,width:i,height:r}=this.element.getBoundingClientRect();console.log(this.element.getBoundingClientRect());const s={t:n,r:window.innerWidth-o,b:window.innerHeight-e,l:t};console.log(s);const l={x:this.settings.threshold*i,y:this.settings.threshold*r};return console.log(l),s.t>this.settings.offset.top+l.y&&s.r>this.settings.offset.right+l.x&&s.b>this.settings.offset.bottom+l.y&&s.l>this.settings.offset.left+l.x}}(e))}execute(){void 0!==this.executing&&clearTimeout(this.executing),this.executing=setTimeout((()=>{console.log("execute"),this.listeners.forEach(e=>{e.doChecking()})}).bind(this),250)}};["scroll","resize","load"].forEach(e=>addEventListener(e,o.execute.bind(o)));const i=function(){let e=document.querySelectorAll("[data-onscreen]");Array.prototype.forEach.call(e,function(e){o.addElement(e)}),o.execute()};window.MutationObserver&&addEventListener("DOMContentLoaded",()=>{i(),new MutationObserver(i).observe(document.body,{attributes:!0,childList:!0,subtree:!0})}),"undefined"!=typeof $&&($.fn.OnScreen=function(){o.addElement(this[0])})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,